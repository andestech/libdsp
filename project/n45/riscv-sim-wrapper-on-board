#!/bin/bash
#set -x

OLD_PWD=`pwd`
ADX_PATH="$( cd "$( dirname "$1" )" && echo `pwd`/$(basename "$1"))"
THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# This file is a board simulator wrapper shell script for both nds32le-elf & nds32be-elf,
# which is called during the gcc/plumhall/supertest testsuite verification flow.
#
# Currently, the nds32 simulator -- run binary on board -- does not run program in intuitive way.
# The simulatior requires a gdb expect file in which the execution file is strictly specified.
# We use this wrapper script to complete the work so that the testsuite can easily use it to do simulation.

# this value should be replaced by build system when start testing
SIMULATOR_DIR=${THIS_DIR}

# the following variables will combine directory name and file name to form a full-path
RUN_GDB=$SIMULATOR_DIR/gdb-ice.exp

# check if the execution file is available
if [ "$1" = "" ] || [ ! -f "$1" ]; then
    echo ""
    echo "No such file $1"
    echo ""
    exit 1
fi

# get the executable file
RUN_FILE=$ADX_PATH

# set gcc testsuite should be "yes" or "no", it will effect how to get return value.
GCC="no"

# set the board cache will be "on" or "lm". lm measns using local memory.
CACHE="lm"

# set the board need reset-and-run or not.
RESET_BOARD="on"

# we should reset the board when we run first test case in every testsuite.
if [ ! -f "$SIMULATOR_DIR/First_Reset_done" ]; then
    RESET="on"
    touch $SIMULATOR_DIR/First_Reset_done
else
    RESET=$RESET_BOARD
fi

# physically invoke simulator
if test -r CVALSTDIN
then
	expect $RUN_GDB $RUN_FILE $GCC $CACHE $RESET CVALSTDIN
else
	expect $RUN_GDB $RUN_FILE $GCC $CACHE $RESET
fi
# Note. Please do NOT add any command between expect $RUN_GDB blah blah blah... and ret=$? to make
# sure the scirpt can get correct return value from GDB.
ret=$?

cd ${OLD_PWD}

exit ${ret}
